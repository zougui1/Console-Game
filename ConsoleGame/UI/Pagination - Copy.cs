using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using ConsoleGame.utils;namespace ConsoleGame.UI.t{public class Pagination{public event Action PageChanged;public event Action PaginationExited;public int ListCount { get; private set; }public int ItemsPerPage { get; private set; }public int Page { get; private set; } = 1;protected bool ChangePage { get; set; } = false;protected bool ExitPagination { get; set; } = false;public string ExitMessage { get; set; } = "You left the interface";protected PaginateAction Action { get; set; }public bool HideCursor { get; set; } = true;public string PageInfos { get; set; } = null;public DefaultKeyPress DefaultKeyPress { get; set; } = null;protected int LastPage { get; set; }public Pagination(int listCount, PaginateAction action = null, int itemsPerPage = 10){ListCount = listCount;ItemsPerPage = itemsPerPage;Action = action;}public Pagination(int listCount, string exitMessage, int itemsPerPage = 10, PaginateAction action = null, bool hideCursor = true){ListCount = listCount;ItemsPerPage = itemsPerPage;Action = action;ExitMessage = exitMessage;HideCursor = hideCursor;}protected int GetLastPage(){int addPage = (ListCount % ItemsPerPage > 0) ? 1 : 0;int lastPage = ListCount / ItemsPerPage + addPage;return lastPage;}public virtual void CallBeforeKeyTesting(){}public virtual void Paginate(){if (HideCursor) {Console.CursorVisible = false;}ExitPagination = false;LastPage = GetLastPage();PaginateExitWhile();PaginationExited?.Invoke();}public void PaginateExitWhile(){while (!ExitPagination){ChangePage = false;(int min, int max) = GetMinAndMaxIndex();CallAction(min, max);Footer(min, max);int entries = max - min;int errorPosition = entries + 3;CallBeforeKeyTesting();PaginateChangePageWhile(errorPosition);PageChanged?.Invoke();}}private void PaginateChangePageWhile(int errorPosition){while (!ChangePage){ConsoleKeyInfo key = Console.ReadKey();switch (key.Key){case ConsoleKey.LeftArrow:PreviousPage(errorPosition);break;case ConsoleKey.RightArrow:NextPage(LastPage, errorPosition);break;case ConsoleKey.Escape:case ConsoleKey.Enter:Exit();break;default:if (DefaultKeyPress != null){DefaultKeyPress(key);}else{string text = Console.ReadLine();Utils.Cconsole.Color("Cyan").Write(key.KeyChar + text);}break;}}}protected (int min, int max) GetMinAndMaxIndex(){int startIndex = (Page - 1) * ItemsPerPage;int maxIndex = (Page * ItemsPerPage) >= ListCount ? ListCount : Page * ItemsPerPage;return (startIndex, maxIndex);}protected (int min, int max) GetMinAndMaxIndex(int page){int startIndex = (page - 1) * ItemsPerPage;int maxIndex = (page * ItemsPerPage) >= ListCount ? ListCount : page * ItemsPerPage;return (startIndex, maxIndex);}private void CallAction(int min, int max){Console.Clear();Action(min, max);}public void Footer(int min, int max){Utils.Endl();Utils.Cconsole.Color("Green").Write("page {0}", Page);if (PageInfos == null){Utils.Cconsole.Right().Absolute().Offset(0).Color("Green").WriteLine($"{min}/{max} over {ListCount} items");}else{Utils.Cconsole.Right().Absolute().Offset(0).Color("Green").WriteLine(PageInfos);}Utils.Endl();}private void PreviousPage(int errorPosition){if (Page == 1){ErrorHandling("The page can't be less than 1", errorPosition);}else{--Page;ChangePage = true;}}private void NextPage(int lastPage, int errorPosition){if (lastPage == Page){ErrorHandling($"The page can't be more than {lastPage}", errorPosition);}else{++Page;ChangePage = true;}}private void Exit(){Utils.Cconsole.Color("Blue").WriteLine(ExitMessage);ExitPagination = true;ChangePage = true;Console.CursorVisible = true;}private void ErrorHandling(string message, int cursorPosition){Console.SetCursorPosition(0, cursorPosition);Utils.Cconsole.Color("Red").WriteLine(message);
Utils.SetTimeout(() => {Console.SetCursorPosition(0, cursorPosition);Utils.FillLine();}, 1000);}}}
